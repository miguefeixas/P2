/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CALCULADORA_H_RPCGEN
#define _CALCULADORA_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#define MAX 10

typedef struct {
	u_int vect_len;
	float *vect_val;
} vect;

typedef struct {
	u_int matrix_len;
	vect *matrix_val;
} matrix;

typedef char *word;

struct calcV_res {
	int errno;
	union {
		vect res;
	} calcV_res_u;
};
typedef struct calcV_res calcV_res;

struct calcM_res {
	int errno;
	union {
		matrix res;
	} calcM_res_u;
};
typedef struct calcM_res calcM_res;

struct add_1_argument {
	float arg1;
	float arg2;
};
typedef struct add_1_argument add_1_argument;

struct sub_1_argument {
	float arg1;
	float arg2;
};
typedef struct sub_1_argument sub_1_argument;

struct mul_1_argument {
	float arg1;
	float arg2;
};
typedef struct mul_1_argument mul_1_argument;

struct div_1_argument {
	float arg1;
	float arg2;
};
typedef struct div_1_argument div_1_argument;

#define CALCULATORPROG 0x20000001
#define CALCULATORVERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define ADD 1
extern  float * add_1(float , float , CLIENT *);
extern  float * add_1_svc(float , float , struct svc_req *);
#define SUB 2
extern  float * sub_1(float , float , CLIENT *);
extern  float * sub_1_svc(float , float , struct svc_req *);
#define MUL 3
extern  float * mul_1(float , float , CLIENT *);
extern  float * mul_1_svc(float , float , struct svc_req *);
#define DIV 4
extern  float * div_1(float , float , CLIENT *);
extern  float * div_1_svc(float , float , struct svc_req *);
extern int calculatorprog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define ADD 1
extern  float * add_1();
extern  float * add_1_svc();
#define SUB 2
extern  float * sub_1();
extern  float * sub_1_svc();
#define MUL 3
extern  float * mul_1();
extern  float * mul_1_svc();
#define DIV 4
extern  float * div_1();
extern  float * div_1_svc();
extern int calculatorprog_1_freeresult ();
#endif /* K&R C */

struct addv_1_argument {
	vect arg1;
	vect arg2;
};
typedef struct addv_1_argument addv_1_argument;

struct subv_1_argument {
	vect arg1;
	vect arg2;
};
typedef struct subv_1_argument subv_1_argument;

struct mulv_1_argument {
	vect arg1;
	float arg2;
};
typedef struct mulv_1_argument mulv_1_argument;

#define CALCULATORVPROG 0x20000002
#define CALCULATORVVERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define ADDV 1
extern  calcV_res * addv_1(vect , vect , CLIENT *);
extern  calcV_res * addv_1_svc(vect , vect , struct svc_req *);
#define SUBV 2
extern  calcV_res * subv_1(vect , vect , CLIENT *);
extern  calcV_res * subv_1_svc(vect , vect , struct svc_req *);
#define MULV 3
extern  calcV_res * mulv_1(vect , float , CLIENT *);
extern  calcV_res * mulv_1_svc(vect , float , struct svc_req *);
#define TRANSPOSE 4
extern  calcM_res * transpose_1(matrix , CLIENT *);
extern  calcM_res * transpose_1_svc(matrix , struct svc_req *);
extern int calculatorvprog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define ADDV 1
extern  calcV_res * addv_1();
extern  calcV_res * addv_1_svc();
#define SUBV 2
extern  calcV_res * subv_1();
extern  calcV_res * subv_1_svc();
#define MULV 3
extern  calcV_res * mulv_1();
extern  calcV_res * mulv_1_svc();
#define TRANSPOSE 4
extern  calcM_res * transpose_1();
extern  calcM_res * transpose_1_svc();
extern int calculatorvprog_1_freeresult ();
#endif /* K&R C */

#define PALINDROMECHECKER 0x20000003
#define PALINDROMECHECKERVERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define ISPALINDROME 1
extern  bool_t * ispalindrome_1(word , CLIENT *);
extern  bool_t * ispalindrome_1_svc(word , struct svc_req *);
extern int palindromechecker_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define ISPALINDROME 1
extern  bool_t * ispalindrome_1();
extern  bool_t * ispalindrome_1_svc();
extern int palindromechecker_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_vect (XDR *, vect*);
extern  bool_t xdr_matrix (XDR *, matrix*);
extern  bool_t xdr_word (XDR *, word*);
extern  bool_t xdr_calcV_res (XDR *, calcV_res*);
extern  bool_t xdr_calcM_res (XDR *, calcM_res*);
extern  bool_t xdr_add_1_argument (XDR *, add_1_argument*);
extern  bool_t xdr_sub_1_argument (XDR *, sub_1_argument*);
extern  bool_t xdr_mul_1_argument (XDR *, mul_1_argument*);
extern  bool_t xdr_div_1_argument (XDR *, div_1_argument*);
extern  bool_t xdr_addv_1_argument (XDR *, addv_1_argument*);
extern  bool_t xdr_subv_1_argument (XDR *, subv_1_argument*);
extern  bool_t xdr_mulv_1_argument (XDR *, mulv_1_argument*);

#else /* K&R C */
extern bool_t xdr_vect ();
extern bool_t xdr_matrix ();
extern bool_t xdr_word ();
extern bool_t xdr_calcV_res ();
extern bool_t xdr_calcM_res ();
extern bool_t xdr_add_1_argument ();
extern bool_t xdr_sub_1_argument ();
extern bool_t xdr_mul_1_argument ();
extern bool_t xdr_div_1_argument ();
extern bool_t xdr_addv_1_argument ();
extern bool_t xdr_subv_1_argument ();
extern bool_t xdr_mulv_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CALCULADORA_H_RPCGEN */
